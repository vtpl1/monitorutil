# *****************************************************
#    Copyright 2022 Videonetics Technology Pvt Ltd
# *****************************************************
cmake_minimum_required(VERSION 3.15)

set(VERSION 1.7.0)

project(monitorutil
	VERSION ${VERSION}
	DESCRIPTION "Monitor each thread of a process"
	HOMEPAGE_URL "https://github.com/vtpl1/monitorutil"
	LANGUAGES CXX)

find_package(spdlog REQUIRED)
find_package(fmt REQUIRED)
set(CMAKE_CXX_VISIBILITY_PRESET hidden)
set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)
# set(BUILD_SHARED_LIBS TRUE)
add_library(${PROJECT_NAME}
    src/Chameleon.cpp
    src/ConfigFile.cpp
    src/logging.cpp

    include/Chameleon.h
    include/ConfigFile.h
    include/logging.h)

configure_file(inc/version.h.in version.h)

include(GenerateExportHeader)
generate_export_header(${PROJECT_NAME})
include(GNUInstallDirs)
target_include_directories(${PROJECT_NAME}
	PUBLIC
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
		$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}>
		$<BUILD_INTERFACE:${PROJECT_BINARY_DIR}>
	PRIVATE
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>)

set_target_properties(
	${PROJECT_NAME} PROPERTIES
		POSITION_INDEPENDENT_CODE ON)

set_target_properties(
	${PROJECT_NAME} PROPERTIES
		SOVERSION	${PROJECT_VERSION_MAJOR}
		VERSION ${PROJECT_VERSION})

target_link_libraries(${PROJECT_NAME}
	PUBLIC spdlog::spdlog
	PUBLIC fmt::fmt)

find_package(Git)
if(Git_FOUND)
    execute_process(COMMAND ${GIT_EXECUTABLE} describe --always --abbrev=40
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE GIT_COMMIT_HASH)
    message(STATUS gch: ${GIT_COMMIT_HASH})
    target_compile_definitions(${PROJECT_NAME}
        PRIVATE GIT_COMMIT_HASH="${GIT_COMMIT_HASH}")

    execute_process(COMMAND ${GIT_EXECUTABLE} rev-parse --abbrev-ref HEAD
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE GIT_COMMIT_BRANCH)
    message(STATUS gbr: ${GIT_COMMIT_BRANCH})
    target_compile_definitions(${PROJECT_NAME}
        PRIVATE GIT_COMMIT_BRANCH="${GIT_COMMIT_BRANCH}")

    # the date of the commit
    execute_process(COMMAND ${GIT_EXECUTABLE} log -1 --format=%ad --date=local
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        OUTPUT_STRIP_TRAILING_WHITESPACE ERROR_QUIET OUTPUT_VARIABLE GIT_COMMIT_DATE)
    target_compile_definitions(${PROJECT_NAME}
        PRIVATE GIT_COMMIT_DATE="${GIT_COMMIT_DATE}")
	set(GIT_DETAILS "${GIT_COMMIT_BRANCH}_${GIT_COMMIT_HASH}_[${GIT_COMMIT_DATE}]")
	target_compile_definitions(${PROJECT_NAME}
        PRIVATE GIT_DETAILS="${GIT_DETAILS}")
	message(STATUS git_details: ${GIT_DETAILS})
endif() #git



## Install library + targets ##################################################
include(CMakePackageConfigHelpers)

add_library(${PROJECT_NAME}::core INTERFACE IMPORTED)
target_link_libraries(${PROJECT_NAME}::core INTERFACE ${PROJECT_NAME})

install(TARGETS ${PROJECT_NAME}
	EXPORT ${PROJECT_NAME}-targets
	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    	NAMELINK_SKIP
	# on Windows put the dlls into bin
	RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
	# ... and the import lib into the devel package
	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
)

install(EXPORT  ${PROJECT_NAME}-targets
	DESTINATION ${CMAKE_INSTALL_DATADIR}/${PROJECT_NAME}
	NAMESPACE  ${PROJECT_NAME}::)

install(TARGETS ${PROJECT_NAME}
	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
		NAMELINK_ONLY
	# on Windows put the dlls into bin
	RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
	# ... and the import lib into the devel package
	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
)

configure_package_config_file(
	${PROJECT_SOURCE_DIR}/cmake/config.cmake.in
	${PROJECT_BINARY_DIR}/${PROJECT_NAME}-config.cmake
	INSTALL_DESTINATION ${CMAKE_INSTALL_DATADIR}/${PROJECT_NAME}
	NO_SET_AND_CHECK_MACRO)

write_basic_package_version_file(
    ${PROJECT_NAME}-config-version.cmake
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY SameMajorVersion)

install(
    FILES
        ${PROJECT_BINARY_DIR}/${PROJECT_NAME}-config.cmake
        ${PROJECT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake
    DESTINATION
        ${CMAKE_INSTALL_DATADIR}/${PROJECT_NAME})

install(
	DIRECTORY
		include/
	DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}
	PATTERN "fmt/bundled" EXCLUDE)

install(
	FILES
		${PROJECT_BINARY_DIR}/${PROJECT_NAME}_export.h
		${PROJECT_BINARY_DIR}/version.h
	DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME})